/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "../common";

export interface VotingSystemInterface extends utils.Interface {
  functions: {
    "addHackathon(string,string,uint256,uint256,address)": FunctionFragment;
    "addProject(string,string,string,string,address,uint256)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "hackathons(uint256)": FunctionFragment;
    "printHackathon(uint256)": FunctionFragment;
    "printProject(uint256,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "voters(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addHackathon"
      | "addProject"
      | "balances"
      | "hackathons"
      | "printHackathon"
      | "printProject"
      | "token"
      | "voters",
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addHackathon",
    values: [string, string, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: "addProject",
    values: [string, string, string, string, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "hackathons", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "printHackathon", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "printProject", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "voters", values: [string]): string;

  decodeFunctionResult(functionFragment: "addHackathon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addProject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hackathons", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "printHackathon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "printProject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;

  events: {
    "HackathonAdded(string,string,uint256,uint256,address)": EventFragment;
    "ProjectAdded(string,string,string,string,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HackathonAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectAdded"): EventFragment;
}

export interface HackathonAddedEventObject {
  _name: string;
  _description: string;
  _endDate: BigNumber;
  _votingEnd: BigNumber;
  _owner: string;
}
export type HackathonAddedEvent = TypedEvent<[string, string, BigNumber, BigNumber, string], HackathonAddedEventObject>;

export type HackathonAddedEventFilter = TypedEventFilter<HackathonAddedEvent>;

export interface ProjectAddedEventObject {
  _name: string;
  _description: string;
  _contractAddress: string;
  _frontEndURL: string;
  _owner: string;
  teamNumber: BigNumber;
  votes: BigNumber;
}
export type ProjectAddedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber, BigNumber],
  ProjectAddedEventObject
>;

export type ProjectAddedEventFilter = TypedEventFilter<ProjectAddedEvent>;

export interface VotingSystem extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingSystemInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addHackathon(
      _name: string,
      _description: string,
      _endDate: BigNumberish,
      _votingEnd: BigNumberish,
      _ownerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addProject(
      _name: string,
      _description: string,
      _contractAddress: string,
      _frontEndURL: string,
      _owner: string,
      _teamNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    hackathons(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, string] & {
        name: string;
        description: string;
        endDate: BigNumber;
        votingEndDate: BigNumber;
        owner: string;
      }
    >;

    printHackathon(index: BigNumberish, overrides?: CallOverrides): Promise<[void]>;

    printProject(hIndex: BigNumberish, pIndex: BigNumberish, overrides?: CallOverrides): Promise<[void]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    voters(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        weight: BigNumber;
        voted: boolean;
        vote: BigNumber;
      }
    >;
  };

  addHackathon(
    _name: string,
    _description: string,
    _endDate: BigNumberish,
    _votingEnd: BigNumberish,
    _ownerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addProject(
    _name: string,
    _description: string,
    _contractAddress: string,
    _frontEndURL: string,
    _owner: string,
    _teamNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  hackathons(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber, string] & {
      name: string;
      description: string;
      endDate: BigNumber;
      votingEndDate: BigNumber;
      owner: string;
    }
  >;

  printHackathon(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

  printProject(hIndex: BigNumberish, pIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

  token(overrides?: CallOverrides): Promise<string>;

  voters(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      weight: BigNumber;
      voted: boolean;
      vote: BigNumber;
    }
  >;

  callStatic: {
    addHackathon(
      _name: string,
      _description: string,
      _endDate: BigNumberish,
      _votingEnd: BigNumberish,
      _ownerAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    addProject(
      _name: string,
      _description: string,
      _contractAddress: string,
      _frontEndURL: string,
      _owner: string,
      _teamNumber: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    hackathons(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, string] & {
        name: string;
        description: string;
        endDate: BigNumber;
        votingEndDate: BigNumber;
        owner: string;
      }
    >;

    printHackathon(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    printProject(hIndex: BigNumberish, pIndex: BigNumberish, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    voters(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        weight: BigNumber;
        voted: boolean;
        vote: BigNumber;
      }
    >;
  };

  filters: {
    "HackathonAdded(string,string,uint256,uint256,address)"(
      _name?: null,
      _description?: null,
      _endDate?: null,
      _votingEnd?: null,
      _owner?: null,
    ): HackathonAddedEventFilter;
    HackathonAdded(
      _name?: null,
      _description?: null,
      _endDate?: null,
      _votingEnd?: null,
      _owner?: null,
    ): HackathonAddedEventFilter;

    "ProjectAdded(string,string,string,string,address,uint256,uint256)"(
      _name?: null,
      _description?: null,
      _contractAddress?: null,
      _frontEndURL?: null,
      _owner?: null,
      teamNumber?: null,
      votes?: null,
    ): ProjectAddedEventFilter;
    ProjectAdded(
      _name?: null,
      _description?: null,
      _contractAddress?: null,
      _frontEndURL?: null,
      _owner?: null,
      teamNumber?: null,
      votes?: null,
    ): ProjectAddedEventFilter;
  };

  estimateGas: {
    addHackathon(
      _name: string,
      _description: string,
      _endDate: BigNumberish,
      _votingEnd: BigNumberish,
      _ownerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addProject(
      _name: string,
      _description: string,
      _contractAddress: string,
      _frontEndURL: string,
      _owner: string,
      _teamNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    hackathons(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    printHackathon(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    printProject(hIndex: BigNumberish, pIndex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    voters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addHackathon(
      _name: string,
      _description: string,
      _endDate: BigNumberish,
      _votingEnd: BigNumberish,
      _ownerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addProject(
      _name: string,
      _description: string,
      _contractAddress: string,
      _frontEndURL: string,
      _owner: string,
      _teamNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    balances(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hackathons(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    printHackathon(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    printProject(hIndex: BigNumberish, pIndex: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voters(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
