/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "../common";

export type HackathonStruct = {
  name: string;
  description: string;
  startDate: BigNumberish;
  endDate: BigNumberish;
  reward: BigNumberish;
  winners: BigNumberish[];
  projectsNr: BigNumberish;
};

export type HackathonStructOutput = [string, string, BigNumber, BigNumber, BigNumber, BigNumber[], BigNumber] & {
  name: string;
  description: string;
  startDate: BigNumber;
  endDate: BigNumber;
  reward: BigNumber;
  winners: BigNumber[];
  projectsNr: BigNumber;
};

export interface VTSInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addHackathon(uint256,string,string,uint256,uint256,uint256)": FunctionFragment;
    "addOrganization(string,string,string,string,address[])": FunctionFragment;
    "addProject(uint256,uint256,address,address[],string,string)": FunctionFragment;
    "addVoter(address,uint256,uint256)": FunctionFragment;
    "executeReward(uint256,uint256)": FunctionFragment;
    "getHackathon(uint256,uint256)": FunctionFragment;
    "getOrganizationHackathons(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hackathons(uint256,uint256)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "organizationAdmins(uint256,uint256)": FunctionFragment;
    "organizationIdCounter()": FunctionFragment;
    "organizations(uint256)": FunctionFragment;
    "organizationsId(uint256)": FunctionFragment;
    "projects(uint256,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "vote(uint256,uint256,uint256)": FunctionFragment;
    "voteByDelegate(uint256,uint256,uint256,address)": FunctionFragment;
    "voted(uint256,address)": FunctionFragment;
    "voters(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "addHackathon"
      | "addOrganization"
      | "addProject"
      | "addVoter"
      | "executeReward"
      | "getHackathon"
      | "getOrganizationHackathons"
      | "getRoleAdmin"
      | "grantRole"
      | "hackathons"
      | "hasRole"
      | "organizationAdmins"
      | "organizationIdCounter"
      | "organizations"
      | "organizationsId"
      | "projects"
      | "renounceRole"
      | "revokeRole"
      | "rewards"
      | "supportsInterface"
      | "vote"
      | "voteByDelegate"
      | "voted"
      | "voters",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addHackathon",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "addOrganization", values: [string, string, string, string, string[]]): string;
  encodeFunctionData(
    functionFragment: "addProject",
    values: [BigNumberish, BigNumberish, string, string[], string, string],
  ): string;
  encodeFunctionData(functionFragment: "addVoter", values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "executeReward", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getHackathon", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getOrganizationHackathons", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "hackathons", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "organizationAdmins", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "organizationIdCounter", values?: undefined): string;
  encodeFunctionData(functionFragment: "organizations", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "organizationsId", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "projects", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "voteByDelegate",
    values: [BigNumberish, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: "voted", values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: "voters", values: [BigNumberish, string]): string;

  decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addHackathon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOrganization", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addProject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHackathon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOrganizationHackathons", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hackathons", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "organizationAdmins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "organizationIdCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "organizations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "organizationsId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteByDelegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;

  events: {
    "AddAdminOrganization()": EventFragment;
    "AddHackathon()": EventFragment;
    "AddOrganization()": EventFragment;
    "AddProject(string,address[],uint256)": EventFragment;
    "AddVoter(uint256,address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Vote()": EventFragment;
    "Winner(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAdminOrganization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddHackathon"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddOrganization"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddProject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddVoter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Winner"): EventFragment;
}

export interface AddAdminOrganizationEventObject {}
export type AddAdminOrganizationEvent = TypedEvent<[], AddAdminOrganizationEventObject>;

export type AddAdminOrganizationEventFilter = TypedEventFilter<AddAdminOrganizationEvent>;

export interface AddHackathonEventObject {}
export type AddHackathonEvent = TypedEvent<[], AddHackathonEventObject>;

export type AddHackathonEventFilter = TypedEventFilter<AddHackathonEvent>;

export interface AddOrganizationEventObject {}
export type AddOrganizationEvent = TypedEvent<[], AddOrganizationEventObject>;

export type AddOrganizationEventFilter = TypedEventFilter<AddOrganizationEvent>;

export interface AddProjectEventObject {
  name: string;
  contributors: string[];
  projectNumber: BigNumber;
}
export type AddProjectEvent = TypedEvent<[string, string[], BigNumber], AddProjectEventObject>;

export type AddProjectEventFilter = TypedEventFilter<AddProjectEvent>;

export interface AddVoterEventObject {
  organizatonId: BigNumber;
  voter: string;
  amount: BigNumber;
}
export type AddVoterEvent = TypedEvent<[BigNumber, string, BigNumber], AddVoterEventObject>;

export type AddVoterEventFilter = TypedEventFilter<AddVoterEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface VoteEventObject {}
export type VoteEvent = TypedEvent<[], VoteEventObject>;

export type VoteEventFilter = TypedEventFilter<VoteEvent>;

export interface WinnerEventObject {
  _hackathonId: BigNumber;
}
export type WinnerEvent = TypedEvent<[BigNumber], WinnerEventObject>;

export type WinnerEventFilter = TypedEventFilter<WinnerEvent>;

export interface VTS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VTSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addHackathon(
      _organizationId: BigNumberish,
      _name: string,
      _description: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addOrganization(
      _name: string,
      _description: string,
      _tokenName: string,
      _tokenSymbol: string,
      admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addProject(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectAddress: string,
      contributors: string[],
      _name: string,
      _url: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addVoter(
      _voter: string,
      _organizationId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeReward(
      _hackathonId: BigNumberish,
      _organizationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getHackathon(
      _hackathonId: BigNumberish,
      _organizationId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[HackathonStructOutput]>;

    getOrganizationHackathons(
      _organizationId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[HackathonStructOutput[]]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hackathons(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        description: string;
        startDate: BigNumber;
        endDate: BigNumber;
        reward: BigNumber;
        projectsNr: BigNumber;
      }
    >;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    organizationAdmins(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    organizationIdCounter(overrides?: CallOverrides): Promise<[BigNumber] & { _value: BigNumber }>;

    organizations(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber] & {
        name: string;
        description: string;
        token: string;
        hackathonNr: BigNumber;
      }
    >;

    organizationsId(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    projects(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber] & {
        name: string;
        url: string;
        projectAddress: string;
        votes: BigNumber;
      }
    >;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    vote(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    voteByDelegate(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      _ownerOfTokens: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    voted(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    voters(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addHackathon(
    _organizationId: BigNumberish,
    _name: string,
    _description: string,
    _startDate: BigNumberish,
    _endDate: BigNumberish,
    _reward: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addOrganization(
    _name: string,
    _description: string,
    _tokenName: string,
    _tokenSymbol: string,
    admins: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addProject(
    _organizationId: BigNumberish,
    _hackathonId: BigNumberish,
    _projectAddress: string,
    contributors: string[],
    _name: string,
    _url: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addVoter(
    _voter: string,
    _organizationId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeReward(
    _hackathonId: BigNumberish,
    _organizationId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getHackathon(
    _hackathonId: BigNumberish,
    _organizationId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<HackathonStructOutput>;

  getOrganizationHackathons(_organizationId: BigNumberish, overrides?: CallOverrides): Promise<HackathonStructOutput[]>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hackathons(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      name: string;
      description: string;
      startDate: BigNumber;
      endDate: BigNumber;
      reward: BigNumber;
      projectsNr: BigNumber;
    }
  >;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  organizationAdmins(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

  organizationIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  organizations(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, BigNumber] & {
      name: string;
      description: string;
      token: string;
      hackathonNr: BigNumber;
    }
  >;

  organizationsId(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  projects(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, BigNumber] & {
      name: string;
      url: string;
      projectAddress: string;
      votes: BigNumber;
    }
  >;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  vote(
    _organizationId: BigNumberish,
    _hackathonId: BigNumberish,
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  voteByDelegate(
    _organizationId: BigNumberish,
    _hackathonId: BigNumberish,
    _projectId: BigNumberish,
    _ownerOfTokens: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  voted(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  voters(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addHackathon(
      _organizationId: BigNumberish,
      _name: string,
      _description: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _reward: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    addOrganization(
      _name: string,
      _description: string,
      _tokenName: string,
      _tokenSymbol: string,
      admins: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    addProject(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectAddress: string,
      contributors: string[],
      _name: string,
      _url: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    addVoter(
      _voter: string,
      _organizationId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    executeReward(_hackathonId: BigNumberish, _organizationId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getHackathon(
      _hackathonId: BigNumberish,
      _organizationId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<HackathonStructOutput>;

    getOrganizationHackathons(
      _organizationId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<HackathonStructOutput[]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hackathons(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        description: string;
        startDate: BigNumber;
        endDate: BigNumber;
        reward: BigNumber;
        projectsNr: BigNumber;
      }
    >;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    organizationAdmins(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

    organizationIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    organizations(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber] & {
        name: string;
        description: string;
        token: string;
        hackathonNr: BigNumber;
      }
    >;

    organizationsId(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    projects(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber] & {
        name: string;
        url: string;
        projectAddress: string;
        votes: BigNumber;
      }
    >;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    vote(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    voteByDelegate(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      _ownerOfTokens: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    voted(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    voters(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AddAdminOrganization()"(): AddAdminOrganizationEventFilter;
    AddAdminOrganization(): AddAdminOrganizationEventFilter;

    "AddHackathon()"(): AddHackathonEventFilter;
    AddHackathon(): AddHackathonEventFilter;

    "AddOrganization()"(): AddOrganizationEventFilter;
    AddOrganization(): AddOrganizationEventFilter;

    "AddProject(string,address[],uint256)"(
      name?: null,
      contributors?: null,
      projectNumber?: null,
    ): AddProjectEventFilter;
    AddProject(name?: null, contributors?: null, projectNumber?: null): AddProjectEventFilter;

    "AddVoter(uint256,address,uint256)"(organizatonId?: null, voter?: null, amount?: null): AddVoterEventFilter;
    AddVoter(organizatonId?: null, voter?: null, amount?: null): AddVoterEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

    "Vote()"(): VoteEventFilter;
    Vote(): VoteEventFilter;

    "Winner(uint256)"(_hackathonId?: null): WinnerEventFilter;
    Winner(_hackathonId?: null): WinnerEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addHackathon(
      _organizationId: BigNumberish,
      _name: string,
      _description: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addOrganization(
      _name: string,
      _description: string,
      _tokenName: string,
      _tokenSymbol: string,
      admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addProject(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectAddress: string,
      contributors: string[],
      _name: string,
      _url: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addVoter(
      _voter: string,
      _organizationId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeReward(
      _hackathonId: BigNumberish,
      _organizationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getHackathon(
      _hackathonId: BigNumberish,
      _organizationId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOrganizationHackathons(_organizationId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hackathons(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    organizationAdmins(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    organizationIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    organizations(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    organizationsId(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    projects(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    voteByDelegate(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      _ownerOfTokens: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    voted(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    voters(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addHackathon(
      _organizationId: BigNumberish,
      _name: string,
      _description: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _reward: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addOrganization(
      _name: string,
      _description: string,
      _tokenName: string,
      _tokenSymbol: string,
      admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addProject(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectAddress: string,
      contributors: string[],
      _name: string,
      _url: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addVoter(
      _voter: string,
      _organizationId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeReward(
      _hackathonId: BigNumberish,
      _organizationId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getHackathon(
      _hackathonId: BigNumberish,
      _organizationId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOrganizationHackathons(_organizationId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hackathons(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    organizationAdmins(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    organizationIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    organizations(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    organizationsId(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projects(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    voteByDelegate(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      _ownerOfTokens: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    voted(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voters(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
