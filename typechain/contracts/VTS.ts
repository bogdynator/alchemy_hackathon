/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

import type { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "../common";

export interface VTSInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addHackathon(uint256,string,string,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addOrganization(string,string,string,string,address[])": FunctionFragment;
    "addProject(uint256,address[],string,string)": FunctionFragment;
    "addVoter(address,uint256,uint256)": FunctionFragment;
    "calculateWinners(uint256)": FunctionFragment;
    "executeReward(uint256,address[])": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hackathons(uint256)": FunctionFragment;
    "hackathonsIdCounter()": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "organizationIdCounter()": FunctionFragment;
    "organizations(uint256)": FunctionFragment;
    "printWinner(uint256)": FunctionFragment;
    "projects(uint256,uint256)": FunctionFragment;
    "projectsIdCounter()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "vote(uint256,uint256,uint256)": FunctionFragment;
    "voteByDelegate(uint256,uint256,uint256,address)": FunctionFragment;
    "voted(uint256,address)": FunctionFragment;
    "voters(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "addHackathon"
      | "addOrganization"
      | "addProject"
      | "addVoter"
      | "calculateWinners"
      | "executeReward"
      | "getRoleAdmin"
      | "grantRole"
      | "hackathons"
      | "hackathonsIdCounter"
      | "hasRole"
      | "organizationIdCounter"
      | "organizations"
      | "printWinner"
      | "projects"
      | "projectsIdCounter"
      | "renounceRole"
      | "revokeRole"
      | "rewards"
      | "supportsInterface"
      | "vote"
      | "voteByDelegate"
      | "voted"
      | "voters",
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DEFAULT_ADMIN_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addHackathon",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: "addOrganization", values: [string, string, string, string, string[]]): string;
  encodeFunctionData(functionFragment: "addProject", values: [BigNumberish, string[], string, string]): string;
  encodeFunctionData(functionFragment: "addVoter", values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "calculateWinners", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "executeReward", values: [BigNumberish, string[]]): string;
  encodeFunctionData(functionFragment: "getRoleAdmin", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "grantRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "hackathons", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "hackathonsIdCounter", values?: undefined): string;
  encodeFunctionData(functionFragment: "hasRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "organizationIdCounter", values?: undefined): string;
  encodeFunctionData(functionFragment: "organizations", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "printWinner", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "projects", values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: "projectsIdCounter", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "revokeRole", values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish, BigNumberish, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "voteByDelegate",
    values: [BigNumberish, BigNumberish, BigNumberish, string],
  ): string;
  encodeFunctionData(functionFragment: "voted", values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: "voters", values: [BigNumberish, string]): string;

  decodeFunctionResult(functionFragment: "DEFAULT_ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addHackathon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOrganization", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addProject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calculateWinners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRoleAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hackathons", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hackathonsIdCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "organizationIdCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "organizations", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "printWinner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projectsIdCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteByDelegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;

  events: {
    "HackathonAdded(uint256,string,string,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OrganizationAdded(string,string,string,string)": EventFragment;
    "ProjectAdded(uint256,string,string)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Voted(uint256,uint256,uint256)": EventFragment;
    "VotedByDelegate(uint256,uint256,uint256,address)": EventFragment;
    "VoterAdded(address,uint256,uint256)": EventFragment;
    "Winner(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HackathonAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrganizationAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotedByDelegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoterAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Winner"): EventFragment;
}

export interface HackathonAddedEventObject {
  _organizationId: BigNumber;
  _name: string;
  _description: string;
  _startDate: BigNumber;
  _endDate: BigNumber;
  _reward: BigNumber;
  _voteStartDate: BigNumber;
  _voteEndDate: BigNumber;
}
export type HackathonAddedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  HackathonAddedEventObject
>;

export type HackathonAddedEventFilter = TypedEventFilter<HackathonAddedEvent>;

export interface OrganizationAddedEventObject {
  name: string;
  description: string;
  tokenName: string;
  tokenSymbol: string;
}
export type OrganizationAddedEvent = TypedEvent<[string, string, string, string], OrganizationAddedEventObject>;

export type OrganizationAddedEventFilter = TypedEventFilter<OrganizationAddedEvent>;

export interface ProjectAddedEventObject {
  _hackathonId: BigNumber;
  _name: string;
  _url: string;
}
export type ProjectAddedEvent = TypedEvent<[BigNumber, string, string], ProjectAddedEventObject>;

export type ProjectAddedEventFilter = TypedEventFilter<ProjectAddedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface VotedEventObject {
  _organizationId: BigNumber;
  _hackathonId: BigNumber;
  _projectId: BigNumber;
}
export type VotedEvent = TypedEvent<[BigNumber, BigNumber, BigNumber], VotedEventObject>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface VotedByDelegateEventObject {
  _organizationId: BigNumber;
  _hackathonId: BigNumber;
  _projectId: BigNumber;
  _ownerOfTokens: string;
}
export type VotedByDelegateEvent = TypedEvent<[BigNumber, BigNumber, BigNumber, string], VotedByDelegateEventObject>;

export type VotedByDelegateEventFilter = TypedEventFilter<VotedByDelegateEvent>;

export interface VoterAddedEventObject {
  _voter: string;
  _organizationId: BigNumber;
  _amount: BigNumber;
}
export type VoterAddedEvent = TypedEvent<[string, BigNumber, BigNumber], VoterAddedEventObject>;

export type VoterAddedEventFilter = TypedEventFilter<VoterAddedEvent>;

export interface WinnerEventObject {
  _hackathonId: BigNumber;
}
export type WinnerEvent = TypedEvent<[BigNumber], WinnerEventObject>;

export type WinnerEventFilter = TypedEventFilter<WinnerEvent>;

export interface VTS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VTSInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addHackathon(
      _organizationId: BigNumberish,
      _name: string,
      _description: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _reward: BigNumberish,
      _voteStartDate: BigNumberish,
      _voteEndDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addOrganization(
      _name: string,
      _description: string,
      _tokenName: string,
      _tokenSymbol: string,
      admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addProject(
      _hackathonId: BigNumberish,
      contributors: string[],
      _name: string,
      _url: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addVoter(
      _voter: string,
      _organizationId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    calculateWinners(
      _hackathonId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    executeReward(
      _hackathonId: BigNumberish,
      winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hackathons(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        description: string;
        startDate: BigNumber;
        endDate: BigNumber;
        reward: BigNumber;
        voteStart: BigNumber;
        voteEnd: BigNumber;
      }
    >;

    hackathonsIdCounter(overrides?: CallOverrides): Promise<[BigNumber] & { _value: BigNumber }>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    organizationIdCounter(overrides?: CallOverrides): Promise<[BigNumber] & { _value: BigNumber }>;

    organizations(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string] & {
        name: string;
        description: string;
        token: string;
      }
    >;

    printWinner(
      _hackathonId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    projects(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber] & {
        name: string;
        url: string;
        votes: BigNumber;
      }
    >;

    projectsIdCounter(overrides?: CallOverrides): Promise<[BigNumber] & { _value: BigNumber }>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    vote(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    voteByDelegate(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      _ownerOfTokens: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    voted(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    voters(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addHackathon(
    _organizationId: BigNumberish,
    _name: string,
    _description: string,
    _startDate: BigNumberish,
    _endDate: BigNumberish,
    _reward: BigNumberish,
    _voteStartDate: BigNumberish,
    _voteEndDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addOrganization(
    _name: string,
    _description: string,
    _tokenName: string,
    _tokenSymbol: string,
    admins: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addProject(
    _hackathonId: BigNumberish,
    contributors: string[],
    _name: string,
    _url: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addVoter(
    _voter: string,
    _organizationId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  calculateWinners(
    _hackathonId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  executeReward(
    _hackathonId: BigNumberish,
    winners: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hackathons(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      name: string;
      description: string;
      startDate: BigNumber;
      endDate: BigNumber;
      reward: BigNumber;
      voteStart: BigNumber;
      voteEnd: BigNumber;
    }
  >;

  hackathonsIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  organizationIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  organizations(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string] & {
      name: string;
      description: string;
      token: string;
    }
  >;

  printWinner(
    _hackathonId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  projects(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, BigNumber] & {
      name: string;
      url: string;
      votes: BigNumber;
    }
  >;

  projectsIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  vote(
    _organizationId: BigNumberish,
    _hackathonId: BigNumberish,
    _projectId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  voteByDelegate(
    _organizationId: BigNumberish,
    _hackathonId: BigNumberish,
    _projectId: BigNumberish,
    _ownerOfTokens: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  voted(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  voters(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addHackathon(
      _organizationId: BigNumberish,
      _name: string,
      _description: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _reward: BigNumberish,
      _voteStartDate: BigNumberish,
      _voteEndDate: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    addOrganization(
      _name: string,
      _description: string,
      _tokenName: string,
      _tokenSymbol: string,
      admins: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    addProject(
      _hackathonId: BigNumberish,
      contributors: string[],
      _name: string,
      _url: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    addVoter(
      _voter: string,
      _organizationId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    calculateWinners(_hackathonId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>;

    executeReward(_hackathonId: BigNumberish, winners: string[], overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hackathons(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        name: string;
        description: string;
        startDate: BigNumber;
        endDate: BigNumber;
        reward: BigNumber;
        voteStart: BigNumber;
        voteEnd: BigNumber;
      }
    >;

    hackathonsIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    organizationIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    organizations(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string] & {
        name: string;
        description: string;
        token: string;
      }
    >;

    printWinner(_hackathonId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    projects(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, BigNumber] & {
        name: string;
        url: string;
        votes: BigNumber;
      }
    >;

    projectsIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    vote(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    voteByDelegate(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      _ownerOfTokens: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    voted(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    voters(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "HackathonAdded(uint256,string,string,uint256,uint256,uint256,uint256,uint256)"(
      _organizationId?: null,
      _name?: null,
      _description?: null,
      _startDate?: null,
      _endDate?: null,
      _reward?: null,
      _voteStartDate?: null,
      _voteEndDate?: null,
    ): HackathonAddedEventFilter;
    HackathonAdded(
      _organizationId?: null,
      _name?: null,
      _description?: null,
      _startDate?: null,
      _endDate?: null,
      _reward?: null,
      _voteStartDate?: null,
      _voteEndDate?: null,
    ): HackathonAddedEventFilter;

    "OrganizationAdded(string,string,string,string)"(
      name?: null,
      description?: null,
      tokenName?: null,
      tokenSymbol?: null,
    ): OrganizationAddedEventFilter;
    OrganizationAdded(
      name?: null,
      description?: null,
      tokenName?: null,
      tokenSymbol?: null,
    ): OrganizationAddedEventFilter;

    "ProjectAdded(uint256,string,string)"(_hackathonId?: null, _name?: null, _url?: null): ProjectAddedEventFilter;
    ProjectAdded(_hackathonId?: null, _name?: null, _url?: null): ProjectAddedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(role?: BytesLike | null, account?: string | null, sender?: string | null): RoleRevokedEventFilter;

    "Voted(uint256,uint256,uint256)"(_organizationId?: null, _hackathonId?: null, _projectId?: null): VotedEventFilter;
    Voted(_organizationId?: null, _hackathonId?: null, _projectId?: null): VotedEventFilter;

    "VotedByDelegate(uint256,uint256,uint256,address)"(
      _organizationId?: null,
      _hackathonId?: null,
      _projectId?: null,
      _ownerOfTokens?: null,
    ): VotedByDelegateEventFilter;
    VotedByDelegate(
      _organizationId?: null,
      _hackathonId?: null,
      _projectId?: null,
      _ownerOfTokens?: null,
    ): VotedByDelegateEventFilter;

    "VoterAdded(address,uint256,uint256)"(_voter?: null, _organizationId?: null, _amount?: null): VoterAddedEventFilter;
    VoterAdded(_voter?: null, _organizationId?: null, _amount?: null): VoterAddedEventFilter;

    "Winner(uint256)"(_hackathonId?: null): WinnerEventFilter;
    Winner(_hackathonId?: null): WinnerEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addHackathon(
      _organizationId: BigNumberish,
      _name: string,
      _description: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _reward: BigNumberish,
      _voteStartDate: BigNumberish,
      _voteEndDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addOrganization(
      _name: string,
      _description: string,
      _tokenName: string,
      _tokenSymbol: string,
      admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addProject(
      _hackathonId: BigNumberish,
      contributors: string[],
      _name: string,
      _url: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addVoter(
      _voter: string,
      _organizationId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    calculateWinners(
      _hackathonId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    executeReward(
      _hackathonId: BigNumberish,
      winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hackathons(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    hackathonsIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    organizationIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    organizations(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    printWinner(
      _hackathonId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    projects(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    projectsIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    voteByDelegate(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      _ownerOfTokens: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    voted(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    voters(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addHackathon(
      _organizationId: BigNumberish,
      _name: string,
      _description: string,
      _startDate: BigNumberish,
      _endDate: BigNumberish,
      _reward: BigNumberish,
      _voteStartDate: BigNumberish,
      _voteEndDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addOrganization(
      _name: string,
      _description: string,
      _tokenName: string,
      _tokenSymbol: string,
      admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addProject(
      _hackathonId: BigNumberish,
      contributors: string[],
      _name: string,
      _url: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addVoter(
      _voter: string,
      _organizationId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    calculateWinners(
      _hackathonId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    executeReward(
      _hackathonId: BigNumberish,
      winners: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hackathons(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hackathonsIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    organizationIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    organizations(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    printWinner(
      _hackathonId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    projects(arg0: BigNumberish, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectsIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    voteByDelegate(
      _organizationId: BigNumberish,
      _hackathonId: BigNumberish,
      _projectId: BigNumberish,
      _ownerOfTokens: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    voted(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voters(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
